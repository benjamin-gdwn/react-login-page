{"ast":null,"code":"var _jsxFileName = \"/Users/bengoodwin/Desktop/udemy-react/use-effect-reducers-context-api/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\"; // reducer function uses only data which is not created in the component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  useEffect(() => {\n    console.log('effect running'); // cleanup function below runs every time, without a dependancy it will still run\n\n    return () => {\n      console.log('effect cleanup');\n    };\n  }, [enteredPassword]); // useEffect runs after each rendering of the component. if we add empty array\n  // it doesnt run after the initial mounting\n  // useEffect(() => {\n  //   // storing the main function and the timeout as a variable to use later down as the cleanup\n  //   const identifier = setTimeout(() => {\n  //     setFormIsValid(\n  //       emailState.isValid && enteredPassword.trim().length > 6\n  //     );\n  //     // timer below after the function\n  //   }, 1000);\n  //   // cleanup for useEffect before it executes the next time\n  //   return () => {\n  //     // inbuilt function to clear the timeout so the timer resets each time the timer is cleared\n  //     clearTimeout(identifier);\n  //   };\n  //   // arguments passed are the states that may changed\n  // }, [enteredEmail, enteredPassword]);\n  // useReducer - first value is the state and the dispatch function\n  // reducer function created outside of the component function\n  // reducer function is first value passed\n  // second value in use reducer is the initial state\n  // we need to use the dispatch to update a value or update validity\n\n  const [emailState, dispatechEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: false\n  });\n\n  const emailChangeHandler = event => {\n    // when dispatch email is called it usually an object used as an identifier\n    // second argument is that we want to sve what user entered, so we add val which holds the target value\n    dispatechEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n  };\n\n  const passwordChangeHandler = event => {\n    setEnteredPassword(event.target.value); // changed entered email to the state set in the reducer function\n\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n  };\n\n  const validateEmailHandler = () => {\n    // changed to email state as the state set in reducer function\n    setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"wZcBPpSEOtqTUgs2Gf4zt2R7PqI=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","action","value","isValid","Login","props","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","console","log","emailState","dispatechEmail","emailChangeHandler","event","type","val","target","passwordChangeHandler","trim","length","validateEmailHandler","setEmailIsValid","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"sources":["/Users/bengoodwin/Desktop/udemy-react/use-effect-reducers-context-api/src/components/Login/Login.js"],"sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\n// reducer function uses only data which is not created in the component\nconst emailReducer = (state, action) => {\n  return { value: '', isValid: false};\n}\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\nuseEffect(() => {\n  console.log('effect running')\n\n  // cleanup function below runs every time, without a dependancy it will still run\n  return () => {\n    console.log('effect cleanup')\n  }\n}, [enteredPassword])\n  // useEffect runs after each rendering of the component. if we add empty array\n  // it doesnt run after the initial mounting\n  // useEffect(() => {\n  //   // storing the main function and the timeout as a variable to use later down as the cleanup\n  //   const identifier = setTimeout(() => {\n  //     setFormIsValid(\n  //       emailState.isValid && enteredPassword.trim().length > 6\n  //     );\n  //     // timer below after the function\n  //   }, 1000);\n  //   // cleanup for useEffect before it executes the next time\n  //   return () => {\n  //     // inbuilt function to clear the timeout so the timer resets each time the timer is cleared\n  //     clearTimeout(identifier);\n  //   };\n  //   // arguments passed are the states that may changed\n  // }, [enteredEmail, enteredPassword]);\n\n  // useReducer - first value is the state and the dispatch function\n  // reducer function created outside of the component function\n  // reducer function is first value passed\n  // second value in use reducer is the initial state\n  // we need to use the dispatch to update a value or update validity\n  const [emailState, dispatechEmail] = useReducer(emailReducer, {value: '', isValid: false} );\n\n\n  const emailChangeHandler = (event) => {\n    \n    // when dispatch email is called it usually an object used as an identifier\n    // second argument is that we want to sve what user entered, so we add val which holds the target value\n    dispatechEmail({ type: 'USER_INPUT', val: event.target.value});\n  };\n\n  const passwordChangeHandler = (event) => {\n    setEnteredPassword(event.target.value);\n    // changed entered email to the state set in the reducer function\n    setFormIsValid(\n      emailState.isValid && event.target.value.trim().length > 6 \n    );\n  };\n\n  const validateEmailHandler = () => {\n    // changed to email state as the state set in reducer function\n    setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordIsValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}