{"ast":null,"code":"var _jsxFileName = \"/Users/bengoodwin/Desktop/udemy-react/use-effect-reducers-context-api/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\"; // reducer function uses only data which is not created in the component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    console.log(state.value);\n    return {\n      value: action.val,\n      isValid: action.val.includes(\"@\")\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    console.log(state.isValid);\n    return {\n      value: state.value,\n      isValid: state.value.includes(\"@\")\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    console.log(state.value);\n    return {\n      value: action.val,\n      isValid: action.val.length > 6\n    };\n  }\n\n  if (action.type === \"USER_BLUR\") {\n    console.log(state.isValid);\n    return {\n      value: state.value,\n      isValid: state.value.length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false); // useReducer - first value is the state and the dispatch function\n  // reducer function created outside of the component function\n  // reducer function is first value passed\n  // second value in use reducer is the initial state\n  // we need to use the dispatch to update a value or update validity\n\n  const [emailState, dispatechEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null\n  }); // useEffect runs after each rendering of the component. if we add empty array\n  // it doesnt run after the initial mounting\n\n  useEffect(() => {\n    // storing the main function and the timeout as a variable to use later down as the cleanup\n    const identifier = setTimeout(() => {\n      setFormIsValid(emailState.isValid && passwordState.isValid); // timer below after the function\n    }, 1000); // cleanup for useEffect before it executes the next time\n\n    return () => {\n      // inbuilt function to clear the timeout so the timer resets each time the timer is cleared\n      clearTimeout(identifier);\n    }; // arguments passed are the states that may changed\n  }, [emailState, passwordState]);\n\n  const emailChangeHandler = event => {\n    // when dispatch email is called it usually an object used as an identifier\n    // second argument is that we want to sve what user entered, so we add val which holds the target value\n    dispatechEmail({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    });\n    setFormIsValid(event.target.value.includes('@') && passwordState.isValid);\n  };\n\n  const passwordChangeHandler = event => {\n    console.log(event.target.value);\n    dispatchPassword({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // changed entered email to the state set in the reducer function\n\n    setFormIsValid(emailState.isValid && passwordState.isValid);\n  };\n\n  const validateEmailHandler = () => {\n    // changed to email state as the state set in reducer function\n    dispatechEmail({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"VpxB8LeykrqamcOQ8s81SysjmtE=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","action","type","console","log","value","val","isValid","includes","passwordReducer","length","Login","props","formIsValid","setFormIsValid","emailState","dispatechEmail","passwordState","dispatchPassword","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"sources":["/Users/bengoodwin/Desktop/udemy-react/use-effect-reducers-context-api/src/components/Login/Login.js"],"sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\n// reducer function uses only data which is not created in the component\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    console.log(state.value)\n    return { value: action.val, isValid: action.val.includes(\"@\") };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    console.log(state.isValid)\n    return { value: state.value, isValid: state.value.includes(\"@\") };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst passwordReducer = (state, action) => {\n  if(action.type === 'USER_INPUT') {\n    console.log(state.value)\n    return { value: action.val, isValid: action.val.length > 6}\n  }\n  if(action.type === \"USER_BLUR\") {\n    console.log(state.isValid)\n\n    return { value: state.value, isValid: state.value.length > 6}\n  }\n  return {value: '', isValid: false}\n}\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n    // useReducer - first value is the state and the dispatch function\n  // reducer function created outside of the component function\n  // reducer function is first value passed\n  // second value in use reducer is the initial state\n  // we need to use the dispatch to update a value or update validity\n\n  const [emailState, dispatechEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null,\n  });\n    // useEffect runs after each rendering of the component. if we add empty array\n  // it doesnt run after the initial mounting\n\n  useEffect(() => {\n    // storing the main function and the timeout as a variable to use later down as the cleanup\n    const identifier = setTimeout(() => {\n      setFormIsValid(\n        emailState.isValid && passwordState.isValid\n      );\n      // timer below after the function\n    }, 1000);\n    // cleanup for useEffect before it executes the next time\n    return () => {\n      // inbuilt function to clear the timeout so the timer resets each time the timer is cleared\n      clearTimeout(identifier);\n    };\n    // arguments passed are the states that may changed\n  }, [emailState, passwordState]);\n\n \n\n  const emailChangeHandler = (event) => {\n    // when dispatch email is called it usually an object used as an identifier\n    // second argument is that we want to sve what user entered, so we add val which holds the target value\n    dispatechEmail({ type: \"USER_INPUT\", val: event.target.value });\n    setFormIsValid(event.target.value.includes('@') && passwordState.isValid);\n  };\n\n  const passwordChangeHandler = (event) => {\n    console.log(event.target.value)\n    dispatchPassword({ type: 'USER_INPUT', val: event.target.value })\n    // changed entered email to the state set in the reducer function\n    setFormIsValid(emailState.isValid && passwordState.isValid);\n  };\n\n  const validateEmailHandler = () => {\n    // changed to email state as the state set in reducer function\n    dispatechEmail({ type: \"INPUT_BLUR\" });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({ type: 'INPUT_BLUR'})\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}